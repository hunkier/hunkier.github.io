<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hunkier</title>
  
  <subtitle>学习笔记，开源代码，技术分享</subtitle>
  <link href="https://hunkier.cn/atom.xml" rel="self"/>
  
  <link href="https://hunkier.cn/"/>
  <updated>2022-10-18T13:48:42.773Z</updated>
  <id>https://hunkier.cn/</id>
  
  <author>
    <name>hunkier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序员的个人财富课</title>
    <link href="https://hunkier.cn/Personal-Wealth-Course-For-Programmers/"/>
    <id>https://hunkier.cn/Personal-Wealth-Course-For-Programmers/</id>
    <published>2022-10-07T03:46:12.000Z</published>
    <updated>2022-10-18T13:48:42.773Z</updated>
    
    
    <summary type="html">&lt;p&gt;  我们会在“管钱”上栽跟头、走弯路，不是因为这事有多困难，而是因为我们没有像重视自己的工作一样重视它。&lt;/p&gt;
&lt;p&gt;  也许你会说，我当然要重视工作了，要不然挣不到钱，又何谈管钱呢？这种想法不是没有道理，但是你有没有想过：为了挣钱而行色匆匆的我们，愿意花100% 的精力在工作上，却从没有停下脚步，花哪怕是 5％ 的时间认真思考下关于“钱”的问题。我们为了挣钱，可以用996 的节奏工作，但真的挣到钱了，却总是往那里一放，任其贬值，或者随便投到某些看似会赚钱的地方，被别人收割。这不是很荒谬吗？&lt;/p&gt;
&lt;p&gt;  英文中有个词叫“low hanging fruit”，字面意思是“挂得很低的、容易摘的果实”，含义是那些容易实现的目标。我相信，一个真正的聪明人，应该学会用更少的精力去摘到那些生活中的 low hanging fruit。和解决你工作中那些极端刁难人的问题相比，进行有效的财富管理就是“容易摘的果子”。而我要做的，就是教给你正确的财富管理方法，让你能不那么费力地跳一跳，就能摘到这些果子。&lt;/p&gt;
&lt;p&gt;  如果你现在把 100%的时间都放在工作、学习上，那么不妨挤出 5%的时间，学习正确的财富管理方法。随着时间的推移，我相信财富管理带给你家庭的收益将逐渐超过工资收入。用5% 的时间，换取至少 50% 的收益，聪明的你不可能错过这笔买卖吧。&lt;/p&gt;</summary>
    
    
    
    <category term="wealth" scheme="https://hunkier.cn/categories/wealth/"/>
    
    <category term="geektime" scheme="https://hunkier.cn/categories/wealth/geektime/"/>
    
    
    <category term="wealth" scheme="https://hunkier.cn/tags/wealth/"/>
    
    <category term="geektime" scheme="https://hunkier.cn/tags/geektime/"/>
    
  </entry>
  
  <entry>
    <title>前端常用工具和知识</title>
    <link href="https://hunkier.cn/Web-front/"/>
    <id>https://hunkier.cn/Web-front/</id>
    <published>2022-03-27T03:46:12.000Z</published>
    <updated>2022-08-08T01:49:29.139Z</updated>
    
    
    <summary type="html">&lt;p&gt; ESLint 代码检查工具：&lt;a href=&quot;https://eslint.bootcss.com/docs/user-guide/configuring&quot;&gt;https://eslint.bootcss.com/docs/user-guide/configuring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prettier 代码格式化：&lt;a href=&quot;https://www.prettier.cn/&quot;&gt;https://www.prettier.cn/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;代码提交规范：&lt;a href=&quot;https://www.conventionalcommits.org/zh-hans/v1.0.0/#%e7%ba%a6%e5%ae%9a%e5%bc%8f%e6%8f%90%e4%ba%a4%e8%a7%84%e8%8c%83&quot;&gt;https://www.conventionalcommits.org/zh-hans/v1.0.0/#%e7%ba%a6%e5%ae%9a%e5%bc%8f%e6%8f%90%e4%ba%a4%e8%a7%84%e8%8c%83&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="https://hunkier.cn/categories/web/"/>
    
    <category term="front" scheme="https://hunkier.cn/categories/web/front/"/>
    
    
    <category term="web" scheme="https://hunkier.cn/tags/web/"/>
    
    <category term="front" scheme="https://hunkier.cn/tags/front/"/>
    
  </entry>
  
  <entry>
    <title>MySQL实战45讲笔记</title>
    <link href="https://hunkier.cn/MySQL-45/"/>
    <id>https://hunkier.cn/MySQL-45/</id>
    <published>2021-09-12T06:31:13.000Z</published>
    <updated>2022-01-11T02:35:50.508Z</updated>
    
    
    <summary type="html">&lt;p&gt;极客时间《MySQL实战45讲笔记》学习笔记&lt;/p&gt;
&lt;h1 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/a&gt;基础篇&lt;/h1&gt;&lt;h2 id=&quot;大体来说，MySQL-可以分为-Server-层和存储引擎层两部分。&quot;&gt;&lt;a href=&quot;#大体来说，MySQL-可以分为-Server-层和存储引擎层两部分。&quot; class=&quot;headerlink&quot; title=&quot;大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。&quot;&gt;&lt;/a&gt;大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。&lt;/h2&gt;&lt;p&gt;Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。&lt;/p&gt;
&lt;p&gt;而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。&lt;/p&gt;
&lt;h2 id=&quot;WAL-的全称是-Write-Ahead-Logging，它的关键点就是先写日志，再写磁盘&quot;&gt;&lt;a href=&quot;#WAL-的全称是-Write-Ahead-Logging，它的关键点就是先写日志，再写磁盘&quot; class=&quot;headerlink&quot; title=&quot;WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘&quot;&gt;&lt;/a&gt;WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘&lt;/h2&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://hunkier.cn/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://hunkier.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mac的最大连接数限制和端口的相关参数的设置</title>
    <link href="https://hunkier.cn/Mac-Max-Connet-Port/"/>
    <id>https://hunkier.cn/Mac-Max-Connet-Port/</id>
    <published>2021-01-02T14:25:28.000Z</published>
    <updated>2021-02-17T02:14:50.373Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“&lt;/p&gt;
&lt;p&gt;使用jmeter压测服务器接口，出现连接超时或者无法找到路由之类的错误。发现实际瓶颈并非出现在服务器上，而是在本机。&lt;/p&gt;
&lt;p&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最大连接数限制&quot;&gt;&lt;a href=&quot;#最大连接数限制&quot; class=&quot;headerlink&quot; title=&quot;最大连接数限制&quot;&gt;&lt;/a&gt;最大连接数限制&lt;/h2&gt;&lt;p&gt;最大连接数限制就是系统所能打开的最大文件数（文件描述符）的限制，分全局和进程两种，相应的命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sysctl kern.maxfiles&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;输出&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kern.maxfiles: 12288&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;说明：全局限制，也就是系统默认的最大连接数限制是12288&lt;/p&gt;</summary>
    
    
    
    <category term="Mac" scheme="https://hunkier.cn/categories/Mac/"/>
    
    <category term="Connect" scheme="https://hunkier.cn/categories/Mac/Connect/"/>
    
    <category term="Port" scheme="https://hunkier.cn/categories/Mac/Connect/Port/"/>
    
    
    <category term="Mac" scheme="https://hunkier.cn/tags/Mac/"/>
    
    <category term="Connect" scheme="https://hunkier.cn/tags/Connect/"/>
    
    <category term="Port" scheme="https://hunkier.cn/tags/Port/"/>
    
  </entry>
  
  <entry>
    <title>Springboot启动扩展点超详细总结，再也不怕面试官问了</title>
    <link href="https://hunkier.cn/Spring-Boot-Extend/"/>
    <id>https://hunkier.cn/Spring-Boot-Extend/</id>
    <published>2020-12-02T14:25:28.000Z</published>
    <updated>2021-02-22T13:23:27.025Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h2&gt;&lt;p&gt;Spring的核心思想就是容器，当容器refresh的时候，外部看上去风平浪静，其实内部则是一片惊涛骇浪，汪洋一片。Springboot更是封装了Spring，遵循约定大于配置，加上自动装配的机制。很多时候我们只要引用了一个依赖，几乎是零配置就能完成一个功能的装配。&lt;/p&gt;
&lt;p&gt;我非常喜欢这种自动装配的机制，所以在自己开发中间件和公共依赖工具的时候也会用到这个特性。让使用者以最小的代价接入。想要把自动装配玩的转，就必须要了解spring对于bean的构造生命周期以及各个扩展接口。当然了解了bean的各个生命周期也能促进我们加深对spring的理解。业务代码也能合理利用这些扩展点写出更加漂亮的代码。&lt;/p&gt;
&lt;p&gt;在网上搜索spring扩展点，发现很少有博文说的很全的，只有一些常用的扩展点的说明。&lt;/p&gt;
&lt;p&gt;所以在这篇文章里，我总结了几乎Spring &amp;amp; Springboot所有的扩展接口，以及各个扩展点的使用场景。并且整理出了一个bean在spring内部从被加载到最后初始化完成所有可扩展点的顺序调用图。从而我们也能窥探到bean是如何一步步加载到spring容器中的。&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://hunkier.cn/categories/SpringBoot/"/>
    
    <category term="Extend" scheme="https://hunkier.cn/categories/SpringBoot/Extend/"/>
    
    
    <category term="SpringBoot" scheme="https://hunkier.cn/tags/SpringBoot/"/>
    
    <category term="Extend" scheme="https://hunkier.cn/tags/Extend/"/>
    
  </entry>
  
  <entry>
    <title>Python 进阶练习</title>
    <link href="https://hunkier.cn/Python-advance-practive/"/>
    <id>https://hunkier.cn/Python-advance-practive/</id>
    <published>2020-11-02T14:25:28.000Z</published>
    <updated>2022-09-19T01:50:56.461Z</updated>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt; &lt;strong&gt;深度学习&lt;/strong&gt;离不开数学分析（高等数学）、线性代数、概率论等知识，&lt;strong&gt;更离不开以编程为核心的动手实践。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无论是在机器学习还是深度学习中，&lt;strong&gt;Python&lt;/strong&gt; 已经成为主导性的编程语言。而且，现在许多主流的深度学习框架都提供Python接口，Python被用于数据预处理、定义网络模型、执行训练过程、数据可视化等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;熟悉 Python 的基础语法，并掌握 NumPy，Pandas 及其他基础工具模块的使用对深度学习实践是非常重要的！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;</summary>
    
    
    
    <category term="Python" scheme="https://hunkier.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://hunkier.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 基础语法</title>
    <link href="https://hunkier.cn/Python-basic-grammar/"/>
    <id>https://hunkier.cn/Python-basic-grammar/</id>
    <published>2020-11-01T14:36:57.000Z</published>
    <updated>2020-11-16T01:20:44.360Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;python基础语法&quot;&gt;&lt;a href=&quot;#python基础语法&quot; class=&quot;headerlink&quot; title=&quot;python基础语法&quot;&gt;&lt;/a&gt;python基础语法&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#1.基础操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;age = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;  		&lt;span class=&quot;comment&quot;&gt;# 声明一个变量age 用来存储一个数字 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;		        &lt;span class=&quot;comment&quot;&gt;# 基础数学加法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Hello World!&amp;#x27;&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;# 打印Hello World!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#2.条件判断if&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;comment&quot;&gt;# 如果 if 跟随的条件为 假 那么不执行属于if 的语句,然后寻找 else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;假的&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;: &lt;span class=&quot;comment&quot;&gt;# 寻找到 else 之后 执行属于else中的语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;1==2是假的&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://hunkier.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://hunkier.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AI Studio基本操作(二) Debug篇</title>
    <link href="https://hunkier.cn/AiStudio-basic-use-debug/"/>
    <id>https://hunkier.cn/AiStudio-basic-use-debug/</id>
    <published>2020-10-29T14:36:57.000Z</published>
    <updated>2020-11-13T05:18:25.808Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何使用PDB来进行代码调试, 可以打印变量和单步执行&lt;/p&gt;
&lt;p&gt;Python自带一个调试器, 在Python 3.7之后甚至成为内置调试器. 这就是PDB. 这是使用Python的用户需要掌握的基本技能.&lt;/p&gt;
&lt;p&gt;下面我们看一下基本演示(GIF循环播放):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ai.bdstatic.com/file/368702F4ACC64CF59009A3EE348F9765&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Debug" scheme="https://hunkier.cn/categories/Debug/"/>
    
    <category term="AiStudio" scheme="https://hunkier.cn/categories/Debug/AiStudio/"/>
    
    <category term="Python" scheme="https://hunkier.cn/categories/Debug/AiStudio/Python/"/>
    
    
    <category term="centos" scheme="https://hunkier.cn/tags/centos/"/>
    
    <category term="PaddleOCR" scheme="https://hunkier.cn/tags/PaddleOCR/"/>
    
    <category term="Python" scheme="https://hunkier.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AI Studio基本操作(一) Notebook篇</title>
    <link href="https://hunkier.cn/AiStudio-basic-use-notebook/"/>
    <id>https://hunkier.cn/AiStudio-basic-use-notebook/</id>
    <published>2020-10-28T14:36:57.000Z</published>
    <updated>2020-11-13T05:18:07.796Z</updated>
    
    
    <summary type="html">&lt;p&gt;由于AI Studio使用了Notebook为主要编辑器, 因此也引入了一些iPython操作. 特别示例说明&lt;/p&gt;
&lt;p&gt;AI Studio的Notebook项目的基本操作.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;项目启停&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;执行和调试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;多文件代码编辑&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上传Notebook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Notebook快捷键&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;暗黑模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;字号调节&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Notebook中使用Shell命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    使用pip来安装自己需要的package (但不支持apt-get)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    查看当前环境中安装的package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    持久化安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        使用git命令来同步代码 (暂时需要Paddle 1.4.1以上)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    文件下载&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python代码执行与调试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;变量监控&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Magic命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     %env：设置环境变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     %run: 运行python代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     %%writefile and %pycat: 导出cell内容/显示外部脚本的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;关于快速查看某个对象/方法/接口的用法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;关于变量监控&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;关于调试代码&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="centos" scheme="https://hunkier.cn/categories/centos/"/>
    
    <category term="PaddleOCR" scheme="https://hunkier.cn/categories/centos/PaddleOCR/"/>
    
    <category term="Python" scheme="https://hunkier.cn/categories/centos/PaddleOCR/Python/"/>
    
    
    <category term="centos" scheme="https://hunkier.cn/tags/centos/"/>
    
    <category term="PaddleOCR" scheme="https://hunkier.cn/tags/PaddleOCR/"/>
    
    <category term="Python" scheme="https://hunkier.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 PaddleOCR HubServing</title>
    <link href="https://hunkier.cn/CentOS-7-install-PaddleOCR-hubserving/"/>
    <id>https://hunkier.cn/CentOS-7-install-PaddleOCR-hubserving/</id>
    <published>2020-10-27T14:36:57.000Z</published>
    <updated>2020-11-13T05:00:58.383Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;  &lt;a href=&quot;https://github.com/PaddlePaddle/PaddleOCR&quot;&gt;PaddleOCR&lt;/a&gt;旨在打造一套丰富、领先、且实用的OCR工具库，助力使用者训练出更好的模型，并应用落地。&lt;/p&gt;</summary>
    
    
    
    <category term="centos" scheme="https://hunkier.cn/categories/centos/"/>
    
    <category term="PaddleOCR" scheme="https://hunkier.cn/categories/centos/PaddleOCR/"/>
    
    <category term="Python" scheme="https://hunkier.cn/categories/centos/PaddleOCR/Python/"/>
    
    
    <category term="centos" scheme="https://hunkier.cn/tags/centos/"/>
    
    <category term="PaddleOCR" scheme="https://hunkier.cn/tags/PaddleOCR/"/>
    
    <category term="Python" scheme="https://hunkier.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 RabbitMQ</title>
    <link href="https://hunkier.cn/CentOS-7-install-RqbbitMQ/"/>
    <id>https://hunkier.cn/CentOS-7-install-RqbbitMQ/</id>
    <published>2020-10-23T08:03:50.000Z</published>
    <updated>2020-10-23T08:31:56.226Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;一、系统环境&quot;&gt;&lt;a href=&quot;#一、系统环境&quot; class=&quot;headerlink&quot; title=&quot;一、系统环境&quot;&gt;&lt;/a&gt;一、系统环境&lt;/h1&gt;&lt;p&gt;1、Centos7-64位&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、配置Erlang安装环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）&lt;a href=&quot;https://packagecloud.io/rabbitmq/erlang/install#bash-rpm&quot;&gt;完成erlang的前置条件配置&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;没有报错则一切正常&lt;/p&gt;</summary>
    
    
    
    <category term="centos" scheme="https://hunkier.cn/categories/centos/"/>
    
    <category term="RabbitMq" scheme="https://hunkier.cn/categories/centos/RabbitMq/"/>
    
    
    <category term="centos" scheme="https://hunkier.cn/tags/centos/"/>
    
    <category term="RabbitMq" scheme="https://hunkier.cn/tags/RabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>Java并发-- AbstractQueuedSynchronizer 队列同步器</title>
    <link href="https://hunkier.cn/Java-Concurrent-AbstractQueuedSynchronizer/"/>
    <id>https://hunkier.cn/Java-Concurrent-AbstractQueuedSynchronizer/</id>
    <published>2020-10-10T00:55:09.000Z</published>
    <updated>2020-10-10T00:44:01.529Z</updated>
    
    
    <summary type="html">&lt;p&gt;队列同步器AbstractQueuedSynchronizer（以下简称同步器），是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示同步状态，通过内置的FIFO队列来完成资源获取线程的排队工作，并发包的作者（Doug Lea）期望它能够成为实现大部分同步需求的基础。&lt;br&gt;</summary>
    
    
    
    <category term="java" scheme="https://hunkier.cn/categories/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/categories/java/concurrent/"/>
    
    <category term="AbstractQueuedSynchronizer" scheme="https://hunkier.cn/categories/java/concurrent/AbstractQueuedSynchronizer/"/>
    
    
    <category term="jvm" scheme="https://hunkier.cn/tags/jvm/"/>
    
    <category term="AbstractQueuedSynchronizer" scheme="https://hunkier.cn/tags/AbstractQueuedSynchronizer/"/>
    
    <category term="java" scheme="https://hunkier.cn/tags/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Java并发-- Lock 接口</title>
    <link href="https://hunkier.cn/Java-Concurrent-Lock-Interface/"/>
    <id>https://hunkier.cn/Java-Concurrent-Lock-Interface/</id>
    <published>2020-02-22T06:55:00.000Z</published>
    <updated>2020-08-18T02:21:07.011Z</updated>
    
    
    <summary type="html">&lt;p&gt;​        锁是用来控制多个线程访问共享资源的方式，一般来说，一个锁能够防止多个线程同时访问共享资源（但是有些锁是可以允许多个线程并发的访问共享资源，比如读写锁）。在 Lock 接口出现之前，Java 程序是靠 synchronized 关键字实现锁的功能的，而 JavaSE 5 之后，并发包中新增了 Lock 接口（以及相关类），只是在使用时需要显式地获取和释放锁。虽然它缺少了 （通过 synchronized 块或者方法所提供的）隐式获取和释放锁的便捷性，但是却拥有了锁获取与释放的可操作性、可中断的获取锁以及超时获取锁等多种 synchronized 关键字所不具备的同步特性。&lt;br&gt;</summary>
    
    
    
    <category term="java" scheme="https://hunkier.cn/categories/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/categories/java/concurrent/"/>
    
    
    <category term="jvm" scheme="https://hunkier.cn/tags/jvm/"/>
    
    <category term="java" scheme="https://hunkier.cn/tags/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/tags/concurrent/"/>
    
    <category term="lock" scheme="https://hunkier.cn/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>Java并发--原子操作的实现原理</title>
    <link href="https://hunkier.cn/Java-Concurrent-realization-principle-of-atomic-operation/"/>
    <id>https://hunkier.cn/Java-Concurrent-realization-principle-of-atomic-operation/</id>
    <published>2020-02-06T02:38:29.000Z</published>
    <updated>2020-07-13T02:57:22.275Z</updated>
    
    
    <summary type="html">&lt;p&gt;原子（atomic）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为“不可被中断的一个或一系列操作”。在多处理器上实现原子操作就变得有点复杂。让我们一起来聊一聊在Intel处理器和Java里是如何实现原子操作的。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://hunkier.cn/categories/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/categories/java/concurrent/"/>
    
    
    <category term="jvm" scheme="https://hunkier.cn/tags/jvm/"/>
    
    <category term="java" scheme="https://hunkier.cn/tags/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/tags/concurrent/"/>
    
    <category term="atomic" scheme="https://hunkier.cn/tags/atomic/"/>
    
    <category term="CAS" scheme="https://hunkier.cn/tags/CAS/"/>
    
    <category term="LOCK" scheme="https://hunkier.cn/tags/LOCK/"/>
    
  </entry>
  
  <entry>
    <title>Java并发--锁的升级与对比</title>
    <link href="https://hunkier.cn/Java-Concurrent-lock-escalation-comparison/"/>
    <id>https://hunkier.cn/Java-Concurrent-lock-escalation-comparison/</id>
    <published>2020-02-05T03:15:10.000Z</published>
    <updated>2020-07-12T00:24:26.568Z</updated>
    
    
    <summary type="html">&lt;p&gt;Java SE 1.6为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”，在Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率，下文会详细分析。&lt;br&gt;</summary>
    
    
    
    <category term="java" scheme="https://hunkier.cn/categories/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/categories/java/concurrent/"/>
    
    
    <category term="jvm" scheme="https://hunkier.cn/tags/jvm/"/>
    
    <category term="java" scheme="https://hunkier.cn/tags/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/tags/concurrent/"/>
    
    <category term="lock escalation" scheme="https://hunkier.cn/tags/lock-escalation/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发--Java对象头</title>
    <link href="https://hunkier.cn/Java-Concurrent-java-object-header/"/>
    <id>https://hunkier.cn/Java-Concurrent-java-object-header/</id>
    <published>2020-02-04T07:31:11.000Z</published>
    <updated>2020-07-11T14:44:32.209Z</updated>
    
    
    <summary type="html">&lt;p&gt;synchronized用的锁是存在Java对象头里的。如果对象是数组类型，则虚拟机用3个字宽（Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit，如表所示。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://hunkier.cn/categories/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/categories/java/concurrent/"/>
    
    
    <category term="jvm" scheme="https://hunkier.cn/tags/jvm/"/>
    
    <category term="java" scheme="https://hunkier.cn/tags/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/tags/concurrent/"/>
    
    <category term="object header" scheme="https://hunkier.cn/tags/object-header/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发--synchronized 的实现原理与应用</title>
    <link href="https://hunkier.cn/Java-Concurrent-synchronized/"/>
    <id>https://hunkier.cn/Java-Concurrent-synchronized/</id>
    <published>2020-02-03T08:51:06.000Z</published>
    <updated>2020-07-10T01:08:54.289Z</updated>
    
    
    <summary type="html">&lt;p&gt;在多线程并发编程中 synchronized 一直是元老级角色，很多人都会称呼它为重量级锁。但是，随着 Java SE 1.6 对 synchronized 进行了各种优化之后，有些情况下它就并不那么重了。本文详细介绍 Java SE 1.6 中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程。&lt;br&gt;</summary>
    
    
    
    <category term="java" scheme="https://hunkier.cn/categories/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/categories/java/concurrent/"/>
    
    
    <category term="jvm" scheme="https://hunkier.cn/tags/jvm/"/>
    
    <category term="java" scheme="https://hunkier.cn/tags/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/tags/concurrent/"/>
    
    <category term="Synchronized" scheme="https://hunkier.cn/tags/Synchronized/"/>
    
  </entry>
  
  <entry>
    <title>Java并发--volatile 的应用</title>
    <link href="https://hunkier.cn/Java-Concurrent-volatile/"/>
    <id>https://hunkier.cn/Java-Concurrent-volatile/</id>
    <published>2020-02-02T06:55:00.000Z</published>
    <updated>2020-07-11T23:21:22.841Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;1-volatile的应用&quot;&gt;&lt;a href=&quot;#1-volatile的应用&quot; class=&quot;headerlink&quot; title=&quot;1　volatile的应用&quot;&gt;&lt;/a&gt;1　volatile的应用&lt;/h2&gt;&lt;p&gt;在多线程并发编程中synchronized和volatile都扮演着重要的角色，volatile是轻量级的synchronized，它在多处理器开发中保证了共享变量的“可见性”。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。如果volatile变量修饰符使用恰当的话，它比synchronized的使用和执行成本更低，因为它不会引起线程上下文的切换和调度。本文将深入分析在硬件层面上Intel处理器是如何实现volatile的，通过深入分析帮助我们正确地使用volatile变量。&lt;br&gt;</summary>
    
    
    
    <category term="java" scheme="https://hunkier.cn/categories/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/categories/java/concurrent/"/>
    
    
    <category term="jvm" scheme="https://hunkier.cn/tags/jvm/"/>
    
    <category term="java" scheme="https://hunkier.cn/tags/java/"/>
    
    <category term="concurrent" scheme="https://hunkier.cn/tags/concurrent/"/>
    
    <category term="volatile" scheme="https://hunkier.cn/tags/volatile/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装 google chrome</title>
    <link href="https://hunkier.cn/CentOS-7-install-google-chrome/"/>
    <id>https://hunkier.cn/CentOS-7-install-google-chrome/</id>
    <published>2020-01-20T13:18:50.000Z</published>
    <updated>2020-03-26T08:37:56.750Z</updated>
    
    
    <summary type="html">&lt;p&gt;第一步： 执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /etc/yum.repos.d/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="centos" scheme="https://hunkier.cn/categories/centos/"/>
    
    <category term="chrome" scheme="https://hunkier.cn/categories/centos/chrome/"/>
    
    
    <category term="centos" scheme="https://hunkier.cn/tags/centos/"/>
    
    <category term="chrome" scheme="https://hunkier.cn/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>设计模式七大原则</title>
    <link href="https://hunkier.cn/Design-patter-7-principle/"/>
    <id>https://hunkier.cn/Design-patter-7-principle/</id>
    <published>2020-01-10T13:34:00.000Z</published>
    <updated>2020-02-28T09:17:08.273Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;一、设计模式的目的&quot;&gt;&lt;a href=&quot;#一、设计模式的目的&quot; class=&quot;headerlink&quot; title=&quot;一、设计模式的目的&quot;&gt;&lt;/a&gt;一、设计模式的目的&lt;/h1&gt;&lt;p&gt;​    编写软件过程中，程序员面临着来自耦合性、内聚性以及可维护性，可扩展性，重用性，灵活性等多方面的挑战，设计模式是为了让程序(软件)，具有更好的&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://hunkier.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="七大原则" scheme="https://hunkier.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
    
    <category term="设计模式" scheme="https://hunkier.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="七大原则" scheme="https://hunkier.cn/tags/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
</feed>
